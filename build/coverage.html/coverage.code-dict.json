{"/home/travis/build/npmtest/node-npmtest-simple-node-logger/test.js":"/* istanbul instrument in package npmtest_simple_node_logger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/lib.npmtest_simple_node_logger.js":"/* istanbul instrument in package npmtest_simple_node_logger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_simple_node_logger = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_simple_node_logger = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-simple-node-logger && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_simple_node_logger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_simple_node_logger\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_simple_node_logger.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_simple_node_logger.rollup.js'] =\n            local.assetsDict['/assets.npmtest_simple_node_logger.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_simple_node_logger.__dirname + '/lib.npmtest_simple_node_logger.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/node_modules/simple-node-logger/index.js":"\n/** darryl.west@raincitysoftware.com **/\n\nmodule.exports = require('./lib/SimpleLogger');\nmodule.exports.AbstractAppender = require('./lib/AbstractAppender');\nmodule.exports.Logger = require('./lib/Logger');\n\nmodule.exports.appenders = {\n    ConsoleAppender:require('./lib/ConsoleAppender'),\n    FileAppender:require('./lib/FileAppender'),\n    RollingFileAppender:require('./lib/RollingFileAppender')\n};\n\nmodule.exports.mocks = {\n    MockAppender:require('./test/mocks/MockAppender'),\n    MockLogger:require('./test/mocks/MockLogger')\n};\n\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/node_modules/simple-node-logger/lib/SimpleLogger.js":"/**\n * @class SimpleLogger\n *\n * @author: darryl.west@raincitysoftware.com\n * @created: 2014-07-06\n */\nconst dash = require( 'lodash' ),\n    Logger = require('./Logger' ),\n    ConsoleAppender = require('./ConsoleAppender' ),\n    FileAppender = require( './FileAppender' ),\n    RollingFileAppender = require( './RollingFileAppender' );\n\nconst SimpleLogger = function(options) {\n    'use strict';\n\n    if (!options) options = {};\n\n    var manager = this,\n        domain = options.domain,\n        appenders = options.appenders || [],\n        loggers = options.loggers || [],\n        dfltLevel = options.level || Logger.DEFAULT_LEVEL,\n        loggerConfigFile = options.loggerConfigFile,\n        refresh = options.refresh,\n        fs = options.fs || require('fs' ),\n        createInterval = options.createInterval || setInterval,\n        minRefresh = options.minRefresh || 10 * 1000,\n        refreshId;\n\n    /**\n     * create a logger with optional category and level\n     *\n     * @param category\n     * @param level\n     */\n    this.createLogger = function(category, level) {\n        var logger;\n  \n        var opts = Object.prototype.toString.call(category) === '[object String]' ? options : dash.merge({}, options, category);\n        \n        opts.category  = dash.isString(category) ? category : opts.category;\n        opts.level     = level ? level : opts.level || dfltLevel;\n        opts.appenders = appenders;\n        \n        logger = new Logger( opts );\n        loggers.push( logger );\n        \n        return logger;\n    };\n\n    /**\n     * create the console appender and add it to the appenders list\n     *\n     * @param opts - appender settings\n     * @returns ConsoleAppender -\n     */\n    this.createConsoleAppender = function(opts) {\n        if (!opts) opts = {};\n\n        return manager.addAppender( new ConsoleAppender( opts ) );\n    };\n\n    /**\n     * create a file appender and add it to the appenders list\n     *\n     * @param opts\n     * @returns a FileAppender object\n     */\n    this.createFileAppender = function(opts) {\n        if (!opts) {\n            throw new Error('file appender must be created with log file path set in options');\n        }\n\n        return manager.addAppender( new FileAppender( opts ) );\n    };\n\n    /**\n     * create a rolling file appender and add it to the appender list\n     *\n     * @param opts\n     * @returns the appender\n     */\n    this.createRollingFileAppender = function( opts ) {\n        return manager.addAppender( new RollingFileAppender( opts ) );\n    };\n\n    /**\n     * add the appender to list\n     *\n     * @param appender\n     * @returns the new appender\n     */\n    this.addAppender = function(appender) {\n        appenders.push( appender );\n\n        return appender;\n    };\n\n    this.getAppenders = function() {\n        return appenders;\n    };\n\n    this.getLoggers = function() {\n        return loggers;\n    };\n\n    /**\n     * start the refresh thread; minimum cycle time = 10 seconds...\n     */\n    this.startRefreshThread = function() {\n        // TODO replace with watcher thread\n        if (fs.existsSync( loggerConfigFile ) && dash.isNumber( refresh )) {\n            var t = Math.max( minRefresh, refresh );\n            refreshId = createInterval( manager.readConfig, t);\n        }\n    };\n\n    /**\n     * set the level of all loggers to the specified level\n     *\n     * @param level - one of the know levels\n     */\n    this.setAllLoggerLevels = function(level) {\n        loggers.forEach(function(logger) {\n            logger.setLevel( level );\n        });\n    };\n\n    /**\n     * read and parse the config file; change settings if required\n     */\n    this.readConfig = function(completeCallback) {\n        // TODO refactor into configuration delegate to read stats and then process file only if stats change\n        const callback = (err, buf) => {\n            if (err) {\n                console.log( err );\n            } else {\n\n                const conf = JSON.parse( buf.toString() );\n                if (conf.appenders && conf.appenders.length > 0) {\n                    // find each appender and set the level\n                    conf.appenders.forEach(function(app) {\n                        const level = app.level;\n\n                        const appender = dash.find( appenders, (item) => {\n                            if (item.getTypeName() === app.typeName && app.level) {\n                                return item;\n                            }\n                        });\n\n                        if (appender && typeof appender.setLevel === 'function') {\n                            appender.setLevel( level );\n                        }\n                    });\n                }\n\n                if (conf.loggers && conf.loggers.length > 0) {\n                    conf.loggers.forEach(item => {\n                        if (item.category === 'all') {\n                            manager.setAllLoggerLevels( item.level );\n                        }\n                    });\n                }\n            }\n\n            if (completeCallback) {\n                return completeCallback( err );\n            }\n        };\n\n        fs.readFile( loggerConfigFile, callback );\n    };\n\n    this.__protected = function() {\n        return {\n            domain:domain,\n            dfltLevel:dfltLevel,\n            refresh:refresh,\n            loggerConfigFile:loggerConfigFile\n        };\n    };\n};\n\nmodule.exports = SimpleLogger;\n\n/**\n * static convenience method to create a simple console logger; see options for details\n *\n * @param options - optional, if present then it could be 1) a string or 2) and object.  if it's a string it's assumed\n * to be the logFilePath; if it's a string or an object with logFilePath property, then a file appender is created.\n *\n * Valid options:\n *  - logFilePath : a path to the file appender\n *  - domain : the logger domain, e.g., machine or site id\n *  - dfltLevel : the default log level (overrides info level)\n *  - timestampFormat : the format used for log entries (see moment date formats for all possibilities)\n *\n * @returns logger\n */\nSimpleLogger.createSimpleLogger = function(options) {\n    'use strict';\n\n    var opts;\n\n    if (!options) {\n        options = {};\n    }\n\n    // if options is a string then it must be the\n    if (typeof options === 'string') {\n        opts = {\n            logFilePath: options\n        };\n    } else {\n        opts = dash.clone( options );\n    }\n\n    const manager = new SimpleLogger(opts);\n\n    // pass options in to change date formats, etc\n    manager.createConsoleAppender( opts );\n\n    if (opts.logFilePath) {\n        manager.createFileAppender( opts );\n    }\n\n    return manager.createLogger();\n};\n\n/**\n * static convenience method to create a file logger (no console logging);\n *\n * @param options - if string then it's the logFilePath, else options with the logFilePath\n * @returns logger\n */\nSimpleLogger.createSimpleFileLogger = function(options) {\n    'use strict';\n\n    var opts;\n\n    if (!options) {\n        throw new Error('must create file logger with a logFilePath');\n    }\n\n    // if options is a string then it must be the\n    if (typeof options === 'string') {\n        opts = {\n            logFilePath: options\n        };\n    } else {\n        opts = dash.clone( options );\n    }\n\n    var manager = new SimpleLogger( opts );\n\n    manager.createFileAppender( opts );\n\n    return manager.createLogger();\n};\n\n/**\n * create a rolling file logger by passing options to SimpleLogger and Logger.  this enables setting\n * of domain, category, etc.\n *\n * @param options\n * @returns rolling logger\n */\nSimpleLogger.createRollingFileLogger = function(options) {\n    'use strict';\n\n    if (!options) {\n        throw new Error('createRollingFileLogger requires configuration options for this constructor');\n    }\n\n    var opts;\n\n    // read a dynamic config file if available\n    if (typeof options.readLoggerConfig === 'function') {\n        opts = options.readLoggerConfig();\n\n        opts.readLoggerConfig = options.readLoggerConfig;\n    } else {\n        opts = options;\n    }\n\n    var manager = new SimpleLogger( opts );\n\n    manager.createRollingFileAppender( opts );\n\n    if (opts.refresh && opts.loggerConfigFile) {\n        process.nextTick( manager.startRefreshThread );\n    }\n\n    return manager.createLogger( opts );\n};\n\n/**\n * create a log manager\n *\n * @param options - file or rolling file specs;\n */\nSimpleLogger.createLogManager = function(options) {\n    'use strict';\n\n    if (!options) {\n        options = {};\n    }\n\n    var opts;\n\n    // read a dynamic config file if available\n    if (typeof options.readLoggerConfig === 'function') {\n        opts = options.readLoggerConfig();\n\n        opts.readLoggerConfig = options.readLoggerConfig;\n    } else {\n        opts = options;\n    }\n\n    var manager = new SimpleLogger( opts );\n\n    if (opts.logDirectory && opts.fileNamePattern) {\n        manager.createRollingFileAppender( opts );\n    }\n\n    // create at least one appender\n    if (manager.getAppenders().length === 0) {\n        manager.createConsoleAppender( opts );\n    }\n\n    return manager;\n};\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/node_modules/simple-node-logger/lib/Logger.js":"/**\n * @class Logger\n *\n * @author: darryl.west@raincitysoftware.com\n * @created: 7/5/14 6:28 PM\n */\nconst dash = require('lodash');\n\nconst Logger = function(options) {\n    'use strict';\n\n    const logger = this,\n        pid = options.pid || process.pid;\n\n    let domain = options.domain,\n        category = options.category,\n        level = options.level || Logger.DEFAULT_LEVEL,\n        levels = options.levels || Logger.STANDARD_LEVELS,\n        currentLevel = levels.indexOf( level ),\n        appenders = options.appenders || [];\n\n    // helper method\n    const isLevelAt = function(lvl) {\n        const idx = levels.indexOf( lvl );\n\n        return idx >= currentLevel;\n    };\n\n    /**\n     * log the statement message\n     *\n     * @param level the level of this message\n     * @param msg\n     */\n    this.log = function(level, msg) {\n        var entry = logger.createEntry( level, msg );\n\n        process.nextTick(function() {\n            // write the message to the appenders...\n            appenders.forEach(function(appender) {\n                appender.write( entry );\n            });\n        });\n\n        return entry;\n    };\n\n    /**\n     * create the entry object used to log messages\n     *\n     * @param level - info, debug, etc.\n     * @param messageList - a list of message objects\n     * @returns then entry object\n     */\n    this.createEntry = function(level, messageList) {\n        const entry = {};\n\n        entry.ts = Date.now();\n\n        entry.pid = pid;\n        if (domain) entry.domain = domain;\n        if (category) entry.category = category;\n\n        entry.level = level;\n        entry.msg = messageList;\n\n        return entry;\n    };\n\n    /**\n     * set the level\n     *\n     * @param lvl one of the recognized logger levels\n     */\n    this.setLevel = function(lvl) {\n        currentLevel = levels.indexOf(lvl);\n        level = lvl;\n        appenders.forEach(app => {\n            app.setLevel( lvl );\n        });\n    };\n\n    /**\n     * return the current level string\n     */\n    this.getLevel = function() {\n        return level;\n    };\n\n    /**\n     * set the list of appenders\n     * @param app\n     */\n    this.setAppenders = function(appenderList) {\n        appenders = appenderList;\n    };\n\n    /**\n     * add an appender to the list\n     *\n     * @param appender - implements write method\n     */\n    this.addAppender = function(appender) {\n        appenders.push( appender );\n    };\n\n    /**\n     * remove the appender using the type name\n     */\n    this.removeAppender = function(typeName) {\n        throw new Error('not implemented yet');\n    };\n\n    this.getAppenders = function() {\n        return appenders;\n    };\n\n    this.isDebug = function() {\n        return isLevelAt( 'debug' );\n    };\n\n    this.isInfo = function() {\n        return isLevelAt( 'info' );\n    };\n\n    // now initialize the methods for the standard levels\n    const init = function() {\n        levels.forEach(function(lvl) {\n            logger[ lvl ] = function() {\n                if (levels.indexOf( lvl ) >= currentLevel) {\n                    var args = Array.prototype.slice.call( arguments );\n                    logger.log( lvl, args );\n                }\n            };\n        });\n    };\n\n    this.__protected = function() {\n        return {\n            pid:pid,\n            domain:domain,\n            category:category\n        };\n    };\n\n    init();\n};\n\nLogger.STANDARD_LEVELS = [ 'all', 'trace', 'debug', 'info', 'warn', 'error', 'fatal' ];\nLogger.DEFAULT_LEVEL = 'info';\n\nmodule.exports = Logger;\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/node_modules/simple-node-logger/lib/ConsoleAppender.js":"/**\n * @class ConsoleAppender\n * @classdesc ConsoleAppender writes to the console all entries at or above the specified level.\n *\n * @author: darryl.west@raincitysoftware.com\n * @created: 7/6/14 12:02 PM\n */\nconst Logger = require('./Logger' ),\n    AbstractAppender = require('./AbstractAppender' );\n\nconst ConsoleAppender = function(options) {\n    'use strict';\n\n    if (!options) options = {};\n\n    let appender = this,\n        typeName = options.typeName,\n        level = options.level || Logger.STANDARD_LEVELS[0],\n        levels = options.levels || Logger.STANDARD_LEVELS,\n        currentLevel = levels.indexOf( level ),\n        writer = options.writer || console.log;\n\n    if (!typeName) {\n        typeName = options.typeName = 'ConsoleAppender';\n    }\n\n    AbstractAppender.extend( this, options );\n\n    /**\n     * default formatter for this appender;\n     * @param entry\n     */\n    this.formatter = function(entry) {\n        var fields = appender.formatEntry( entry );\n\n        return fields.join( appender.separator );\n    };\n\n    /**\n     * call formatter then write the entry to the console output\n     * @param entry - the log entry\n     */\n    this.write = function(entry) {\n        if (levels.indexOf( entry.level ) >= currentLevel) {\n            writer( appender.formatter( entry ));\n        }\n    };\n\n    this.setLevel = function(level) {\n        const idx = levels.indexOf( level );\n        if (idx >= 0) {\n            currentLevel = idx;\n        }\n    };\n};\n\nmodule.exports = ConsoleAppender;\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/node_modules/simple-node-logger/lib/AbstractAppender.js":"/**\n * @class AbstractAppender\n *\n * @author: darryl.west@raincitysoftware.com\n * @created: 7/7/14 5:58 PM\n */\nconst Logger = require('./Logger' ),\n    util = require( 'util' ),\n    moment = require( 'moment' ),\n    dash = require( 'lodash' );\n\nconst AbstractAppender = function(options) {\n    'use strict';\n\n    const appender = this,\n        typeName = options.typeName,\n        timestampFormat = options.timestampFormat || 'HH:mm:ss.SSS';\n\n    this.separator = options.separator || ' ';\n\n    /**\n     * format the entry and return the field list\n     *\n     * @param entry the log entry\n     * @returns field array\n     */\n    this.formatEntry = function(entry) {\n        var fields = [];\n\n        if (entry.domain) {\n            fields.push( entry.domain );\n        }\n\n        fields.push( appender.formatTimestamp( entry.ts ) );\n        fields.push( appender.formatLevel( entry.level ) );\n\n        if (entry.category) {\n            fields.push( entry.category );\n        }\n\n        fields.push( appender.formatMessage( entry.msg ) );\n\n        return fields;\n    };\n\n    this.formatMessage = function(msg) {\n        var list;\n\n        if (!msg) {\n            return '';\n        }\n\n        if (util.isArray( msg )) {\n            list = msg.map(function(item) {\n                if (util.isDate( item )) {\n                    return appender.formatDate( item );\n                } else {\n                    return appender.formatObject( item );\n                }\n            });\n\n            return list.join('');\n        } else {\n            return msg;\n        }\n    };\n\n    this.formatDate = function(value) {\n        return value.toJSON();\n    };\n\n    this.formatObject = function(value) {\n        if (!value) {\n            return '';\n        }\n\n        if (dash.isObject( value )) {\n            try {\n                return JSON.stringify( value );\n            } catch (ignore) {\n                return 'json error: ' + value.toString();\n            }\n        } else {\n            var s = value.toString();\n            if (s === '[object Object]') {\n                return util.inspect( value );\n            } else {\n                return s;\n            }\n        }\n    };\n\n    /**\n     * format the level string by forcing to upper case and padding to 5 chars\n     *\n     * @param level\n     * @returns {string}\n     */\n    this.formatLevel = function(level) {\n        var str = level.toUpperCase();\n        if (str.length < 5) str += ' ';\n\n        return str;\n    };\n\n    /**\n     * format the timestamp to HH:mm:ss.SSS\n     *\n     * @param ts the unix milliseconds\n     * @returns formatted string\n     */\n    this.formatTimestamp = function(ts) {\n        return moment( ts ).format( timestampFormat );\n    };\n\n    /**\n     * return the type name of this appender (ConsoleAppender)\n     */\n    this.getTypeName = function() {\n        return typeName;\n    };\n\n    // constructor tests\n    if (!typeName) throw new Error('appender must be constructed with a type name');\n};\n\nmodule.exports = AbstractAppender;\n\nAbstractAppender.extend = function(child, options) {\n    'use strict';\n\n    const parent = new AbstractAppender( options );\n\n    dash.extend( child, parent );\n\n    return parent;\n};\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/node_modules/simple-node-logger/lib/FileAppender.js":"/**\n * @class FileAppender\n *\n * @author: darryl.west@raincitysoftware.com\n * @created: 7/7/14 5:15 PM\n */\nconst Logger = require('./Logger' ),\n    AbstractAppender = require('./AbstractAppender' ),\n    dash = require( 'lodash' ),\n    path = require( 'path' );\n\nconst FileAppender = function(options) {\n    'use strict';\n\n    const appender = this,\n        fs = options.fs || require( 'fs' ),        \n        newline = /^win/.test(process.platform) ? '\\r\\n' : '\\n';\n\n    let typeName = options.typeName,\n        autoOpen = dash.isBoolean( options.autoOpen ) ? options.autoOpen : true,\n        logFilePath = options.logFilePath,\n        level = options.level || Logger.DEFAULT_LEVEL,\n        levels = options.levels || Logger.STANDARD_LEVELS,\n        currentLevel = levels.indexOf( level ),\n        writer = options.writer;\n\n    if (!typeName) {\n        // required for abstract class\n        typeName = options.typeName = 'FileAppender';\n    }\n\n    AbstractAppender.extend( this, options );\n\n    /**\n     * default formatter for this appender;\n     * @param entry\n     */\n    this.formatter = function(entry) {\n        var fields = appender.formatEntry( entry );\n\n        // add new line (for linux and windows)\n        fields.push( newline );\n        \n        return fields.join( appender.separator );\n    };\n\n    /**\n     * call formatter then write the entry to the console output\n     * @param entry - the log entry\n     */\n    this.write = function(entry) {\n        if (levels.indexOf( entry.level ) >= currentLevel) {\n            writer.write( appender.formatter( entry ) );\n        }\n    };\n\n    this.setLevel = function(level) {\n        var idx = levels.indexOf( level );\n        if (idx >= 0) {\n            currentLevel = idx;\n        }\n    };\n\n    // writer is opened on construction\n    const openWriter = function() {\n        if (!writer) {\n            var file = path.normalize( logFilePath ),\n                opts = {\n                    flags:'a',\n                    encoding:'utf8'\n                };\n\n            writer = fs.createWriteStream( file, opts );\n        }\n    };\n\n    this.closeWriter = function() {\n        if (writer) {\n            writer.end('\\n');\n        }\n    };\n\n    // constructor tests\n    (function() {\n        if (!logFilePath) {\n            throw new Error('appender must be constructed with a log file path');\n        }\n    }());\n\n    if (autoOpen) {\n        openWriter();\n    }\n};\n\nmodule.exports = FileAppender;\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/node_modules/simple-node-logger/lib/RollingFileAppender.js":"/**\n * @class RollingFileAppender\n *\n * roll on size and/or date/time;\n *\n * @author: darryl.west@raincitysoftware.com\n * @created: 7/27/14 9:52 AM\n */\nconst Logger = require( './Logger' ),\n    AbstractAppender = require( './AbstractAppender' ),\n    dash = require( 'lodash' ),\n    moment = require( 'moment' ),\n    path = require( 'path' );\n\nconst RollingFileAppender = function(options) {\n    'use strict';\n\n    const appender = this,\n        fs = options.fs || require( 'fs' ),\n        newline = /^win/.test(process.platform) ? '\\r\\n' : '\\n';\n\n    let typeName = options.typeName,\n        autoOpen = dash.isBoolean( options.autoOpen ) ? options.autoOpen : true,\n        logDirectory = options.logDirectory,\n        fileNamePattern = options.fileNamePattern,\n        dateFormat = options.dateFormat || 'YYYY.MM.DD',\n        level = options.level || Logger.DEFAULT_LEVEL,\n        levels = options.levels || Logger.STANDARD_LEVELS,\n        currentLevel = levels.indexOf( level ),\n        currentFile = options.currentFile,\n        rollTimer,\n        createInterval = options.createInterval || setInterval,\n        writers = [];\n\n    if (!typeName) {\n        typeName = options.typeName = 'RollingFileAppender';\n    }\n\n    AbstractAppender.extend( this, options );\n        const getWriter = function() {\n        return writers[0];\n    };\n\n    const openWriter = function(filename) {\n        let writer,\n            file,\n            opts;\n\n        if (!filename) {\n            filename = appender.createFileName();\n        }\n\n        file = path.join( logDirectory, filename );\n        opts = {\n            flags:'a',\n            encoding:'utf8'\n        };\n\n        writer = fs.createWriteStream( file, opts );\n\n        // make this the current writer...\n        writers.unshift( writer );\n        currentFile = file;\n\n        // now close the current logger and remove from the writers list\n        while (writers.length > 1) {\n            // close the old writer\n            writer = writers.pop();\n            writer.removeAllListeners();\n            writer.end('\\n');\n        }\n    };\n\n    // check once per minute to see if we need to roll\n    const startRollTimer = function() {\n        rollTimer = createInterval(function() {\n            if (appender.checkForRoll()) {\n                openWriter();\n            }\n        }, 60 * 1000);\n    };\n\n    /**\n     * default formatter for this appender;\n     * @param entry\n     */\n    this.formatter = function(entry) {\n        var fields = appender.formatEntry( entry );\n\n        fields.push( newline );\n\n        return fields.join( appender.separator );\n    };\n\n    /**\n     * call formatter then write the entry to the console output\n     * @param entry - the log entry\n     */\n    this.write = function(entry) {\n        if (levels.indexOf( entry.level ) >= currentLevel) {\n            var writer = getWriter();\n            if (writer) {\n                writer.write( appender.formatter( entry ) );\n            } else {\n                console.log( 'no writer...' );\n            }\n        }\n    };\n\n    this.checkForRoll = function(now) {\n        // check to see if the\n        const fn = appender.createFileName( now ),\n            current = path.basename( currentFile );\n\n        return fn !== current;\n    };\n\n    this.createFileName = function(now) {\n        let dt;\n\n        if (now || now instanceof moment) {\n            dt = now.format( dateFormat );\n        } else {\n            dt = moment().format( dateFormat );\n        }\n\n        return fileNamePattern.replace( /<DATE>/i, dt );\n    };\n\n    this.setLevel = function(level) {\n        const idx = levels.indexOf( level );\n        if (idx >= 0) {\n            currentLevel = idx;\n        }\n    };\n\n    this.__protected = function() {\n        return {\n            openWriter:openWriter,\n            currentFile:currentFile,\n            rollTimer:rollTimer,\n            writers:writers\n        };\n    };\n\n    // constructor tests\n    (function() {\n        if (!logDirectory) {\n            throw new Error('appender must be constructed with a log directory');\n        }\n        if (!fileNamePattern) {\n            throw new Error('appender must be constructed with a file name pattern');\n        }\n    }());\n    \n\n    // now validate the date pattern and file format\n    // date may only contain YMDHAa-.\n\n    if (autoOpen) {\n        openWriter();\n        startRollTimer();\n    }\n};\n\nmodule.exports = RollingFileAppender;\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/node_modules/simple-node-logger/test/mocks/MockAppender.js":"/**\n * @class MockAppender\n *\n * @author: darryl.west@raincitysoftware.com\n * @created: 7/6/14 8:41 AM\n */\nconst MockAppender = function() {\n    'use strict';\n    const Logger = require('../../lib/Logger' );\n    let level  = Logger.DEFAULT_LEVEL,\n        levels = Logger.STANDARD_LEVELS,\n        currentLevel = levels.indexOf( level );\n    let appender = this;\n\n    this.entries = [];\n\n    this.setLevel = function(level) {\n        var idx = levels.indexOf( level );\n        if (idx >= 0) {\n            currentLevel = idx;\n        }\n    };\n\n    this.write = function(entry) {\n        appender.entries.push( entry );\n    };\n};\n\nmodule.exports = MockAppender;\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/node_modules/simple-node-logger/test/mocks/MockLogger.js":"/**\n * @class MockLogger\n *\n * @author: darryl.west@raincitysoftware.com\n * @created: 7/8/14 5:16 PM\n */\nconst dash = require('lodash' ),\n    Logger = require('../../lib/Logger' ),\n    MockAppender = require('./MockAppender');\n\nconst MockLogger = function(opts) {\n    'use strict';\n\n    const mock = this,\n        appender = new MockAppender();\n\n    if (!opts) opts = {};\n    if (!opts.pid) opts.pid = 'test12345';\n    if (!opts.appenders) opts.appenders = [ appender ];\n    if (!opts.level) opts.level = 'trace';\n\n    dash.extend( this, new Logger(opts) );\n\n    this.getLogEntries = function() {\n        return appender.entries;\n    };\n};\n\nMockLogger.createLogger = function(category, level) {\n    'use strict';\n\n    const opts = {};\n\n    if (category) opts.category = category;\n    if (level) opts.level = level;\n\n    return new MockLogger( opts );\n};\n\nmodule.exports = MockLogger;\n","/home/travis/build/npmtest/node-npmtest-simple-node-logger/node_modules/simple-node-logger/watcher.js":"#!/usr/bin/env node\n\n// dpw@alameda.local\n// 2015.03.04\n'use strict';\n\nconst fs = require('fs');\nconst spawn = require('child_process').spawn;\nconst clearScreen = '\u001b[H\u001b[2J';\n\nlet files = new Set();\nlet tid;\n\nconst run = function() {\n    process.stdout.write( clearScreen ); \n    console.log('Changed files: ', files);\n\n    let runner = spawn( 'make', [ 'test' ] );\n\n    runner.stdout.on('data', function( data ) {\n        process.stdout.write( data );\n    });\n\n    runner.stderr.on('data', function( data ) {\n        process.stdout.write( data );\n    });\n\n    runner.on('close', function(code) {\n        tid = null;\n        files.clear();\n    });\n};\n\nconst changeHandler = function(event, filename) {\n    if ( filename.endsWith('.js') ) {\n        files.add( filename );\n\n        if (!tid) {\n            tid = setTimeout(function() {\n                run();\n            }, 250);\n        }\n    }\n};\n\n// run();\nfs.watch( './lib', { recursive:true }, changeHandler );\nfs.watch( './test', { recursive:true }, changeHandler );\n\n"}